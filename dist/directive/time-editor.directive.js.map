{"version":3,"file":"time-editor.directive.js","sourceRoot":"","sources":["../../src/directive/time-editor.directive.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAAyG;AAKzG,IAAa,mBAAmB;IAI9B,6BAAoB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;QAHxB,eAAU,GAAuB,IAAI,mBAAY,CAAC,IAAI,CAAC,CAAC;IAG5B,CAAC;IAEvC,sCAAQ,GAAR;QACE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;IACpF,CAAC;IACuB,sCAAQ,GAAR,UAAS,KAAK;QACpC,IAAI,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAEH,0BAAC;AAAD,CAAC,AAxBD,IAwBC;AAvBW;IAAT,aAAM,EAAE;8BAAa,mBAAY;uDAAgC;AACzD;IAAR,YAAK,EAAE;8BAAO,IAAI;iDAAC;AAeI;IAAvB,mBAAY,CAAC,QAAQ,CAAC;;;;mDAKtB;AAtBU,mBAAmB;IAH/B,gBAAS,CAAC;QACT,QAAQ,EAAE,cAAc;KACzB,CAAC;qCAKwB,iBAAU;GAJvB,mBAAmB,CAwB/B;AAxBY,kDAAmB","sourcesContent":["import { Directive, ElementRef, Output, Input, EventEmitter, OnInit, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[time-value]'\r\n})\r\nexport class TimeEditorDirective implements OnInit {\r\n  @Output() timeChange: EventEmitter<Date> = new EventEmitter(true);\r\n  @Input() time: Date;\r\n\r\n  constructor(private el: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n    if (typeof this.time === 'undefined') {\r\n      this.time = new Date();\r\n      this.timeChange.emit(this.time);\r\n    }\r\n    if (!(this.time instanceof Date)) {\r\n      this.time = new Date(this.time);\r\n      this.timeChange.emit(this.time);\r\n    }\r\n    this.el.nativeElement.value = this.time.getHours() + ':' + this.time.getMinutes();\r\n  }\r\n  @HostListener('change') onChange(event) {\r\n    let value = this.el.nativeElement.value.split(':');\r\n    this.time.setHours(value[0]);\r\n    this.time.setMinutes(value[1]);\r\n    this.timeChange.emit(this.time);\r\n  }\r\n\r\n}"]}