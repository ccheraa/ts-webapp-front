{"version":3,"file":"model-client.js","sourceRoot":"","sources":["../../src/db/model-client.ts"],"names":[],"mappings":"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","sourcesContent":["import { Http } from '@angular/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Loader } from './base';\r\nimport { Multi } from '@ts-webapp/common';\r\nlet  rootUrl = '/api/db';\r\nexport function RootUrl(url?: string): string {\r\n  if (url) {\r\n    rootUrl = url;\r\n  }\r\n  return rootUrl;\r\n}\r\nexport class ModelClient<T> {\r\n  public url = '/';\r\n  public http: Http;\r\n  loader: Loader;\r\n  loaderName: string;\r\n  useLoader(loader: Loader, loaderName: string) {\r\n    this.loader = loader;\r\n    this.loaderName = loaderName;\r\n  }\r\n  load(id: string) {\r\n    if (this.loader) {\r\n      this.loader.load(id);\r\n    }\r\n  }\r\n  unload(id: string) {\r\n    if (this.loader) {\r\n      this.loader.unload(id);\r\n    }\r\n  }\r\n  decodeResponse(subject: Subject<any>, response: any) {\r\n    if (response.json) {\r\n      let json = response.json();\r\n      if (json.ok) {\r\n        subject.next(json.data);\r\n      } else {\r\n        subject.error(json.errors);\r\n      }\r\n    } else {\r\n      subject.error(['NO JSON']);\r\n    }\r\n    subject.complete();\r\n  }\r\n\r\n  // C\r\n  create(document: T): Subject<T>;\r\n  create(documents: T[]): Subject<T[]>;\r\n  create(document: T | T[]): Subject<T | T[]> {\r\n    this.load('create:' + this.loaderName);\r\n    let result: Subject<T> = new Subject();\r\n    this.http.post(rootUrl + this.url, { document }).subscribe(\r\n      response => {\r\n        this.unload('create:' + this.loaderName);\r\n        this.decodeResponse(result, response);\r\n      },\r\n      err => {\r\n        this.unload('create:' + this.loaderName);\r\n        result.error(err);\r\n      }\r\n    );\r\n    return result;\r\n  }\r\n\r\n  // // R\r\n  list(conditions?: T, projection?: any, options?: any): Subject<T[]> {\r\n    this.load('list:' + this.loaderName);\r\n    let result: Subject<T[]> = new Subject();\r\n    this.http.post(rootUrl + this.url, { conditions, projection, options}).subscribe(\r\n      response => {\r\n        this.unload('list:' + this.loaderName);\r\n        this.decodeResponse(result, response);\r\n      },\r\n      err => {\r\n        this.unload('list:' + this.loaderName);\r\n        result.error(err);\r\n      }\r\n    );\r\n    return result;\r\n  }\r\n  find(conditions?: T, projection?: any, options?: any): Subject<Multi<T>> {\r\n    this.load('find:' + this.loaderName);\r\n    let result: Subject<Multi<T>> = new Subject();\r\n    this.http.post(rootUrl + this.url + '/find', { conditions, projection, options}).subscribe(\r\n      response => {\r\n        this.unload('find:' + this.loaderName);\r\n        this.decodeResponse(result, response);\r\n      },\r\n      err => {\r\n        this.unload('find:' + this.loaderName);\r\n        result.error(err);\r\n      }\r\n    );\r\n    return result;\r\n  }\r\n  count(conditions?: T): Subject<number> {\r\n    // TODO: conditions not used\r\n    this.load('count:' + this.loaderName);\r\n    let result: Subject<number> = new Subject();\r\n    this.http.get(rootUrl + this.url + '/count').subscribe(\r\n      response => {\r\n        this.unload('count:' + this.loaderName);\r\n        this.decodeResponse(result, response);\r\n      },\r\n      err => {\r\n        this.unload('count:' + this.loaderName);\r\n        result.error(err);\r\n      }\r\n    );\r\n    return result;\r\n  }\r\n  get(id: string, projection?: any, options?: any): Subject<T> {\r\n    // TODO: projection and options not used\r\n    this.load('get:' + this.loaderName);\r\n    let result: Subject<T> = new Subject();\r\n    this.http.get(rootUrl + this.url + '/' + id).subscribe(\r\n      response => {\r\n        this.unload('get:' + this.loaderName);\r\n        this.decodeResponse(result, response);\r\n      },\r\n      err => {\r\n        this.unload('get:' + this.loaderName);\r\n        result.error(err);\r\n      }\r\n    );\r\n    return result;\r\n  }\r\n  // // U\r\n  set(id: string, document: T, options?: any): Subject<T> {\r\n    // TODO: options not used\r\n    this.load('set:' + this.loaderName);\r\n    let result: Subject<T> = new Subject();\r\n    this.http.post(rootUrl + this.url + '/' + id, { document }).subscribe(\r\n      response => {\r\n        this.unload('set:' + this.loaderName);\r\n        this.decodeResponse(result, response);\r\n      },\r\n      err => {\r\n        this.unload('set:' + this.loaderName);\r\n        result.error(err);\r\n      }\r\n    );\r\n    return result;\r\n  }\r\n  update(conditions: T, document: T, options?: any): Subject<T> {\r\n    // TODO: options not used\r\n    this.load('update:' + this.loaderName);\r\n    let result: Subject<T> = new Subject();\r\n    this.http.put(rootUrl + this.url, { conditions, document }).subscribe(\r\n      response => {\r\n        this.unload('update:' + this.loaderName);\r\n        this.decodeResponse(result, response);\r\n      },\r\n      err => {\r\n        this.unload('update:' + this.loaderName);\r\n        result.error(err);\r\n      }\r\n    );\r\n    return result;\r\n  }\r\n  // // D\r\n  remove(): Subject<number>;\r\n  remove(id?: string): Subject<number>;\r\n  remove(conditions?: T): Subject<number>;\r\n  remove(conditions?: string | T): Subject<number> {\r\n    this.load('remove:' + this.loaderName);\r\n    let result: Subject<number> = new Subject();\r\n    let isString = typeof conditions === 'string';\r\n    this.http.delete(\r\n      rootUrl + this.url + (isString ? '/' + <string>conditions : ''),\r\n      isString ? null : { body: { conditions: conditions } }\r\n    ).subscribe(\r\n      response => {\r\n        this.unload('remove:' + this.loaderName);\r\n        this.decodeResponse(result, response);\r\n      },\r\n      err => {\r\n        this.unload('remove:' + this.loaderName);\r\n        result.error(err);\r\n      }\r\n    );\r\n    return result;\r\n  }\r\n}"]}