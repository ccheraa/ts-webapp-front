{"version":3,"file":"dialog.service.js","sourceRoot":"","sources":["../../src/service/dialog.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injectable, OnInit } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { MdDialog, MdDialogRef, ComponentType } from '@angular/material';\r\n\r\nimport { DialogClass, DialogDef } from '@ts-webapp/common';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  private isModal = false;\r\n  constructor (private dialog: MdDialog) {}\r\n  modal() {\r\n    this.isModal = true;\r\n    return this;\r\n  }\r\n  use<T>(component: ComponentType<T>, data: any = null, disableClose: boolean = false): Observable<any> {\r\n    let dialog = this.dialog.open(component, { disableClose: disableClose || this.isModal });\r\n    this.isModal = false;\r\n    dialog.componentInstance['data'] = data;\r\n    return dialog.afterClosed();\r\n  }\r\n  run(options: DialogDef): Observable<any> {\r\n    let dialog = this.dialog.open(DialogComponent, { disableClose: options.modal || this.isModal });\r\n    this.isModal = false;\r\n    dialog.componentInstance.options = new DialogClass(options.title, options.message, options.buttons);\r\n    options.buttons = dialog.componentInstance.options.buttons;\r\n    return dialog.afterClosed();\r\n  }\r\n  error(message: string): Observable<any>;\r\n  error(title: string, message: string): Observable<any>;\r\n  error(title: string, message: string, buttons: any[]): Observable<any>;\r\n  error(title: string, message?: string, buttons: any[] = ['OK']): Observable<any> {\r\n    return this.alert(title, message);\r\n  }\r\n  alert(message: string): Observable<any>;\r\n  alert(title: string, message: string): Observable<any>;\r\n  alert(title: string, message: string, buttons: any[]): Observable<any>;\r\n  alert(title: string, message?: string, buttons: any[] = ['OK']): Observable<any> {\r\n    if (!message) {\r\n      message = title;\r\n      title = '';\r\n    }\r\n    return this.run({ title, message, buttons: ['OK'] });\r\n  }\r\n  confirm(message: string): Observable<any>;\r\n  confirm(title: string, message: string): Observable<any>;\r\n  confirm(title: string, message: string, buttons: any[]): Observable<any>;\r\n  confirm(title: string, message?: string, buttons: any[] = ['OK', 'Cancel']): Observable<any> {\r\n    let result = new Subject<any>();\r\n    if (!message) {\r\n      message = title;\r\n      title = '';\r\n    }\r\n    let options = { title, message, buttons };\r\n    this.run(options).subscribe(res => {\r\n      (res === options.buttons[0].id) ? result.next(true) : result.next(false);\r\n      result.complete();\r\n    });\r\n    return result;\r\n  }\r\n  ask(message: string): Observable<any>;\r\n  ask(title: string, message: string): Observable<any>;\r\n  ask(title: string, message: string, buttons: any[]): Observable<any>;\r\n  ask(title: string, message?: string, buttons: any[] = ['Yes', 'No', 'Cancel']): Observable<any> {\r\n    if (!message) {\r\n      message = title;\r\n      title = '';\r\n    }\r\n    return this.run({ title, message, buttons: ['Yes', 'No', 'Cancel'] });\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: 'dialog.service.html',\r\n})\r\nexport class DialogComponent implements OnInit {\r\n  options = this.dialogRef['options'];\r\n  constructor(public dialogRef: MdDialogRef<DialogComponent>) {}\r\n  ngOnInit() {\r\n    this.options.buttons = this.options.buttons.slice().reverse();\r\n  }\r\n  result(id) {\r\n    this.dialogRef.close(id);\r\n  }\r\n}\r\n"]}